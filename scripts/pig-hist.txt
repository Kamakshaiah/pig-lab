sh ls
quit
sh ls
register 'myudfs.jar'; 
sh cat emp_data
data = load 'emp_data' using PigStorage(',') as (id, name, age:int, location); 
dump data; 
result = foreach data generate myudfs.Sample_Eval(name); 
result = foreach data generate myudfs.Sample_Eval(name);
result = foreach data generate Sample_Eval(name);
dump result; 
data = load 'emp_data' using PigStorage(',') as (id, name, age:int, location); 
dump data; 
result = foreach data generate Sample_Eval(name);
dump result; 
sh ls
register 'myudfs.jar'; 
data = load 'names.csv' using PigStorage(',') as (name:chararray); 
dump data; 
result = foreach data generate myudfs.UPPER(name); 
define myudfs.UPPER upper(); 
define myudfs.UPPER as upper(); 
sh ls
sh cat myudfscript.pig
register myudfs.jar; 
data = load 'names.csv' using PigStorage(',') as (name:chararray); 
dump data; 
result = foreach data generate myudfs.UPPER(name); 
quit; 
sh ls
sh cat bagdata.csv
A = load 'bagdata.csv' using PigStorage(',') as (B1:bag{T1:tuple(t1:int, t2:int)}, B2:bag{T2:tuple(f1:int, f2:int)); 
sh cat bagdata.csv
A = load 'bagdata.csv' using PigStorage(',') as (B1:bag{T1:tuple(t1:int, t2:int)}, B2:bag{T2:tuple(f1:int, f2:int)}); 
dump A; 
A = LOAD 'bagdata.csv' using PigStorage(',') AS (B1:bag{T1:tuple(t1:int,t2:int)},B2:bag{T2:tuple(f1:int,f2:int)});
dump A; 
A = LOAD 'bagdata.csv' using PigStorage(',') as (t1:int, t2:int, f1:int, f2:int);
dump A; 
B = group A by t1, t2; 
B = group A by B1:bag{t1, t2}; 
dump B; 
B = group A by bag{t1, t2}; 
dump A; 
B = foreach A generate t1, t2; 
dump B; 
B = foreach A generate {(t1, t2)}; 
dump B; 
sh cat bagdata.csv
A = LOAD 'bagdata.csv' using PigStorage(',') AS (B1:bag{T1:tuple(t1:int,t2:int)},B2:bag{T2:tuple(f1:int,f2:int)});
dump A; 
B = foreach (group A by T1:tuple(t1, t2), T2:tuple(f1, f2)) generate B1:bag; 
sh cat bagdata.csv
A = LOAD 'bagdata.csv' using PigStorage(',') AS (B1:bag{T1:tuple(t1:int,t2:int)},B2:bag{T2:tuple(f1:int,f2:int)});
dump A; 
A = LOAD 'bagdata.csv' using PigStorage(',') AS (t1, t2, t3, t4, t5, t6, t7, t8);
dump A; 
B = foreach (group A by T1:tupel(t1, t2)) generate B1:bag(T1); 
B = group A by T1:tupel(t1, t2); 
B = group A by T1:tuple(t1, t2); 
B = group A by {(t1, t2), (t3, t4)}, {(t5, t6), (t7, t8)}; 
B = group A by {(t1, t2), (t3, t4)}; 
dump B; 
quit; 
A = LOAD 'bagdata1' AS (B1:bag{T1:tuple(t1:int,t2:int)},B2:bag{T2:tuple(f1:int,f2:int)});
dump A; 
quit; 
A = LOAD 'bagdata1' AS (B1:bag{T1:tuple(t1:int,t2:int)},B2:bag{T2:tuple(f1:int,f2:int)});
dump A; 
quit; 
sh cat bagdata1
A = LOAD 'bag_data' AS (B1:bag{T1:tuple(t1:int,t2:int)},B2:bag{T2:tuple(f1:int,f2:int)});
A = LOAD 'bag_data' using PigStorage(',') AS (B1:bag{T1:tuple(t1:int,t2:int)},B2:bag{T2:tuple(f1:int,f2:int)});
dump A; 
A = LOAD 'bagdata1' using PigStorage(',') AS (B1:bag{T1:tuple(t1:int,t2:int)},B2:bag{T2:tuple(f1:int,f2:int)});
dump A; 
sh cat bagdata1
A = LOAD 'bagdata1' using PigStorage(',') AS (B1:bag{},B2:ba{});
A = LOAD 'bagdata1' using PigStorage(',') AS (B1:bag{},B2:bag{});
dump A; 
quit; 
A = LOAD 'bagdata1' using PigStorage(';') AS (B1:bag{},B2:bag{});
dump A; 
A = LOAD 'bagdata1' using PigStorage(';') AS (B1:bag{T1:tuple(t1:int, t2:int)},B2:bag{T2:tuple(f1:int, f2:int)});
dump A; 
B = foreach A generate B1; 
dump B
describe A; 
X = foreach A generate SUBTRACT(B1, B2); 
dump X; 
sh cat bagdata.csv
A1 = load 'bagdata.csv' using PigStorage(',') as (c1:int, c2:int, c3:int, c4:int, c5:int, c6:int, c7:int, c8:int, c9:int); 
dump A1; 
bag1 = foreach A1 generate {(d1, d2), (d3, d4)}; 
bag1 = foreach A1 generate {(c1, c2), (c3, c4)}; 
dump bag1; 
bag2 = foreach A1 generate {(c5, c6), (c7, c8)}; 
dump bag2; 
result = foreach A1 generate SUBTRACT(bag1, bag2); 
result = foreach A1 generate (bag1, bag2); 
result = group A1 by (bag1, bag2); 
bags = foreach A1 generate (bag1:bag{(c1, c2), (c3, c4)}, bag2:bag{(c5, c6), (c7, c8)}); 
bags = foreach A1 generate (bag1:{(c1, c2), (c3, c4)}, bag2:{(c5, c6), (c7, c8)}); 
bags = foreach A1 generate (bag1:bag{t1:tuple(c1, c2), t1:tuple(c3, c4)}, bag2:bag{t3:tuple(c5, c6), t4:tuple(c7, c8)}); 
bags = foreach A1 generate (bag1:bag{t1:tuple(c1, c2)}, bag2:bag{t3:tuple(c5, c6)}); 
bags = foreach A1 generate (bag1:bag{t1:tuple(c1, c2)}); 
bags = foreach A1 generate bag{t1:tuple(c1, c2)}; 
bags = foreach A1 generate ({(t1, t2)}, {(t3, t4)});  
bags = foreach A1 generate ({(c1, c2)}, {(c3, c4)});  
dump bags
bags = foreach A1 generate bag1:bag{t1:tuple(c1, c2), t1:tuple(c3, c4)}, bag2:bag{t3:tuple(c5, c6), t4:tuple(c7, c8)}; 
bags = foreach A1 generate (bag1:bag{t1:tuple(c1, c2), t1:tuple(c3, c4)}, bag2:bag{t3:tuple(c5, c6), t4:tuple(c7, c8)}); 
bags = load 'bagdata.csv' using PigStorage(',') as (B1:bag{T1:tuple(c1, c2)}); 
dump bags; 
bags = load 'bagdata.csv' using PigStorage(',') as (B1:bag{t1:tuple(c1, c2),t1:tuple(c3, c4) }, B2:bag{t3:tuple(c5, c6), t4:tuple(c7, c8)}); 
bags = load 'bagdata.csv' using PigStorage(',') as (B1:bag{t1:tuple(c1, c2),t1:tuple(c3, c4)}, B2:bag{t3:tuple(c5, c6), t4:tuple(c7, c8)}); 
bags = load 'bagdata2.csv' using PigStorage(',') as (B1:bag{t1:tuple(c1, c2),t1:tuple(c3, c4)}); 
bags = load 'bagdata2.csv' using PigStorage(',') as (B1:bag{t1:tuple(c1, c2),t2:tuple(c3, c4)}); 
dump A1;  
dump A; 
A2 = load 'bagdata2.csv' using PigStorage(',') as (c1:int, c2:int, c3:int, c4:int); 
dump A2; 
bags = foreach A2 generate (B1:bag{t1:tuple(c1, c2)}, B2:bag{t2:tuple(c3, c4)}); 
bags = foreach A2 generate ({t1:tuple(c1, c2)}, {t2:tuple(c3, c4)}); 
bags = foreach A2 generate (B1:bag{t1:tuple(c1, c2)}, B2:bag{t2:tuple(c3, c4)}); 
bags = foreach A2 generate (B1:{t1:(c1, c2)}, B2:{t2:(c3, c4)}); 
bags = foreach A2 generate {(c1, c2)}; 
bags = foreach A2 generate ({(c1, c2)}, {(c3, c4))}; 
bags = foreach A2 generate ({(c1, c2)}, {(c3, c4)}); 
dump bags; 
bags = foreach A2 generate {(c1, c2)}, {(c3, c4)}; 
dump bags; 
bags = foreach A2 generate B1:bag{(c1, c2)}, B2:bag{(c3, c4)}; 
bags = foreach A2 generate B1:{(c1, c2)}, B2:{(c3, c4)}; 
bags = foreach A2 generate {(c1, c2)}, {(c3, c4)}; 
dump bags; 
bags = foreach A2 generate SUBTRACT({(c1, c2)}, {(c3, c4)}); 
dump bags; 
result = foreach (group A2 by {(c1, c2), (c3, c4)} as b1, b2; 
result = foreach (group A2 by {(c1, c2), (c3, c4)}) as b1, b2; 
result = foreach (group A2 by {(c1, c2)}, {(c3, c4)}) as (b1, b2); 
result = foreach (group A2 by ({(c1, c2)}, {(c3, c4)})) as (b1, b2); 
result = foreach (group A2 by {(c1, c2)}, {(c3, c4)}) as (b1, b2); 
result = foreach (group A2 by {(c1, c2)}, {(c3, c4)}) generate flatten(group) as (b1, b2); 
result = foreach (group A2 by ({(c1, c2)}, {(c3, c4)})) generate flatten(group) as (b1, b2); 
dump A2;  
gps = group A2 by ({(c1, c2)}, {(c3, c4)}); 
gps = group A2 by {(c1, c2)}, {(c3, c4)}; 
gps = group A2 by {(c1, c2), (c3, c4)}; 
dump gps; 
gps = foreach A2 (group A2 by (c1, c2), (c3, c4)) generate flatten(group); 
gps = foreach (group A2 by (c1, c2), (c3, c4)) generate flatten(group); 
gps = foreach (group A2 by {(c1, c2), (c3, c4)}) generate flatten(group); 
gps = foreach A2 generate {(c1, c2), (c3, c4)} as b; 
dump gps; 
gps = foreach A2 generate {(c1, c2)}, {(c3, c4)} as (b1, b2); 
gps = foreach A2 generate b1:bag{(c1, c2)}, b2:bag{(c3, c4)}; 
gps = foreach A2 generate (b1:bag{(c1, c2)}, b2:bag{(c3, c4)}); 
gps = foreach A2 generate {(c1, c2)}, {(c3, c4)} as b1, b2; 
gps = foreach A2 generate ({(c1, c2)}, {(c3, c4)}) as (b1, b2); 
gps = foreach A2 generate ({(c1, c2)}, {(c3, c4)}) as (b1:bag, b2:bag); 
gps = foreach A2 generate ({(c1, c2)}, {(c3, c4)}); 
dump gps; 
gps = foreach A2 generate {(c1, c2)}, {(c3, c4)}; 
dump gps; 
gps = foreach A2 generate {(c1, c2)}, {(c3, c4)} flatten(group); 
gps = foreach {(c1, c2)}, {(c3, c4)} generate flatten(group); 
gps = foreach A2 generate {(c1, c2)}, {(c3, c4)}; 
dump gps; 
gps = foreach A2 generate flatten{(c1, c2)}, {(c3, c4)}; 
gps = foreach A2 generate flatten({(c1, c2)}, {(c3, c4)}); 
gps = foreach A2 generate flatten(b1:{(c1, c2)}, b2:{(c3, c4)}); 
gps = foreach A2 generate flatten(b1:bag{(c1, c2)}, b2:bag{(c3, c4)}); 
gps = foreach A2 generate (b1:bag{(c1, c2)}, b2:bag{(c3, c4)}); 
gps = foreach A2 genera {(c1, c2)}, {(c3, c4)}; 
gps = foreach A2 generate {(c1, c2)}, {(c3, c4)}; 
dump gps; 
gps = foreach A2 generate subtract({(c1, c2)}, {(c3, c4)}); 
gps = foreach A2 generate SUBTRACT({(c1, c2)}, {(c3, c4)}); 
dump gps; 
quit; 
sh cat bagdata.csv
sh cat bagdata2.csv
data = load 'bagdata2.csv' using PigStorage(',') as (c1:int, c2:int, c3:int, c4:int); 
dump data; 
bag1 = foreach data generate {(c1, c2)} as b1; 
dump bag1; 
bag1 = foreach data generate flatten({(c1, c2)}) as b1; 
bag2 = foreach data generate {(c3, c4)}) as b2; 
bag1 = foreach data generate {(c1, c2)} as b1; 
dump b1; 
bag1 = foreach data generate {(c1, c2)}; 
dum bag1; 
dump bag1; 
bag2 = foreach data generate {(c3, c4)}; 
dump bag2; 
result = foreach data generate SUBTRACT(bag1, bag1); 
result = foreach data generate SUBTRACT(bag1, bag2); 
gp = group data by *; 
result = foreach gp generate SUBTRACT(bag1, bag2); 
dump gp; 
dump data; 
dump bag1; 
dump bag2; 
res = foreach flatten(bag1, bag2) generate SUBTRACT(bag1, bag2); 
res = foreach {bag1, bag2} generate SUBTRACT(bag1, bag2); 
res = foreach A generate SUBTRACT(bag1, bag2); 
res = foreach (group A by *) generate SUBTRACT(bag1, bag2); 
res = foreach (group data by *) generate SUBTRACT(bag1, bag2); 
cdata = foreach data generate CONCAT(bag1, bag2); 
gp = group data by *; 
result = foreach gp generate SUBTRACT(bag1, bag2); 
dump data; 
dump bag1; 
dump bag2; 
dump gp; 
result = foreach gp generate SUBTRACT(bag1, bag2); 
result = foreach gp generate group, SUBTRACT(bag1, bag2); 
result = foreach gp generate group, (SUBTRACT(bag1, bag2)); 
res = foreach {bag1, bag2} generate SUBTRACT(bag1, bag2); 
res = foreach flatten(bag1, bag2) generate SUBTRACT(bag1, bag2); 
res = foreach flatten(gp) generate SUBTRACT(bag1, bag2); 
res = join bag1 by *, bag1 by *; 
res = join bag1 by *, bag2 by *; 
dump res; 
res = foreach data generate join bag1 by *, bag2 by *; 
res = foreach data generate (join bag1 by *, bag2 by *); 
res = join bag1, bag2; 
res = join bag1 by *, bag2 by *; 
dump res; 
bags = cogroup bag1, bag2; 
bags = cogroup bag1 by *, bag2 by *; 
dump bags; 
bags = cogroup bag1 by gp, bag2 by gp; 
bags = cogroup bag1, bag2; 
emp_sales = LOAD 'hdfs://localhost:9000/pig_data/emp_sales.txt' USING PigStorage(',')
emp_sales = LOAD 'empsales.txt' USING PigStorage(',')
emp_sales = LOAD 'empsales.txt' USING PigStorage(',') using USING PigStorage(',')
   as (sno:int, name:chararray, age:int, salary:int, dept:chararray);
emp_sales = LOAD 'empsales.txt' USING PigStorage(',') using USING PigStorage(',') as (sno:int, name: chararray, age:int, salary:int, dep:chararray); 
emp_sales = LOAD 'empsales.txt' USING PigStorage(',') as (sno:int, name: chararray, age:int, salary:int, dep:chararray); 
dump emp_sales; 
emp_bonus = LOAD 'empbonus.txt' USING PigStorage(',') as (sno:int, name: chararray, age:int, salary:int, dep:chararray); 
dump emp_bonus; 
cgdata = cogroup emp_sales by sno, emp_bonus by sno; 
dump cgdata; 
subtracteddata = foreach cgdata generate SUBTRACT(emp_sales, emp_bonus); 
dump subtracteddata; 
subtracteddata = foreach cgdata generate SUBTRACT(emp_bonus, emp_sales); 
dump subtracteddata; 
dump bag1; 
dump bag2; 
gbags = group data *; 
gbags = group data by *; 
dump gbags; 
dump data; 
gpdata = group data by c4; 
dump gpdata; 
gpdata1 = group data by c2; 
dump gpdata1; 
cgpdata = cogroup gpdata by group, gpdata1 by group; 
dump cgpdata; 
res = foreach cgpdata generate SUBTRACT(gpdata, gpdata1); 
dump res; 
